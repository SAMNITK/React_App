{"version":3,"file":"index.js","sources":["../src/hooks/useInViewAnimate.ts","../src/hooks/useInViewScroll.ts","../src/hooks/useMotionAsState.ts","../src/hooks/useStateAsMotion.tsx"],"sourcesContent":["import { useEffect } from \"react\"\nimport { Target, useAnimation, VariantLabels } from \"framer-motion\"\nimport { IntersectionOptions, useInView } from \"react-intersection-observer\"\n\ninterface IStates {\n  initial?: VariantLabels | Target\n  animate: VariantLabels | Target\n}\n\n/**\n * `useInViewAnimate` starts a specified animation when the element becomes visible\n *\n * @param variants - Motion Variants\n *\n * @returns inViewRef\n * @returns animationControls\n */\nexport const useInViewAnimate = (\n  { initial, animate }: IStates,\n  options: IntersectionOptions = {}\n) => {\n  const animation = useAnimation()\n\n  const [inViewRef, inView] = useInView(options)\n\n  useEffect(() => {\n    if (initial) animation.set(initial)\n  }, [])\n\n  useEffect(() => {\n    if (inView) {\n      animation.start(animate)\n    } else if (initial && options.triggerOnce === false) {\n      animation.start(initial)\n    }\n  }, [inView])\n\n  return { inViewRef, animation }\n}\n","import { RefObject, useEffect } from \"react\"\nimport { MotionValue, useMotionValue, useViewportScroll } from \"framer-motion\"\n\ninterface IOptions {\n  threshold?: number\n}\n\n/**\n * `useInViewScroll` returns a MotionValue that updates when the target element is visible in viewport\n *\n * @param el - The target element\n * @param options - An object of options e.g. `threshold`\n */\nexport const useInViewScroll = (\n  el: RefObject<HTMLElement>,\n  options: IOptions = {}\n): MotionValue<number> => {\n  const progress = useMotionValue(0)\n  const { scrollY } = useViewportScroll()\n\n  useEffect(() => {\n    const handleScrollProgress = () => {\n      const node = el.current\n      if (!node) return\n\n      const threshold = options.threshold || 0\n\n      const elPosY = node.getBoundingClientRect().top + scrollY.get()\n      const elHeight = node.scrollHeight\n\n      const viewIntersect = Math.max(elPosY - window.innerHeight, 0)\n      const current = scrollY.get() - viewIntersect - threshold\n      const total = Math.min(window.innerHeight, elPosY) + elHeight - threshold\n\n      const quotient = current / total\n\n      if (quotient > 0 && quotient < 1) {\n        progress.set(quotient)\n      }\n    }\n\n    const unsubscribeFromScroll = scrollY.onChange(handleScrollProgress)\n\n    return () => unsubscribeFromScroll()\n  }, [])\n\n  return progress\n}\n","import { useEffect, useState } from \"react\"\nimport { MotionValue } from \"framer-motion\"\n\n/**\n * `useMotionAsState` returns a React state that updates when the MotionValue changes\n *\n * @param motionValue - MotionValue\n */\nexport const useMotionAsState = (motionValue: MotionValue) => {\n  const [state, setState] = useState()\n\n  useEffect(() => {\n    const handleChange = () => setState(motionValue.get())\n\n    const unsubscribe = motionValue.onChange(handleChange)\n\n    return () => unsubscribe()\n  }, [])\n\n  return state\n}\n","import { useEffect } from \"react\"\nimport { useMotionValue } from \"framer-motion\"\n\n/**\n * `useStateAsMotion` returns a MotionValue that updates when the React state changes\n *\n * @param state - React state\n */\nexport const useStateAsMotion = (state: any) => {\n  const motionValue = useMotionValue(state)\n\n  useEffect(() => {\n    motionValue.set(state)\n  }, [state])\n\n  return motionValue\n}\n"],"names":["useAnimation","useInView","useEffect","useMotionValue","useViewportScroll","useState"],"mappings":"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"}